plugins {
    id 'st-android-library-conventions'
}

def conventions = parseVersionsToml("tools/conventions/gradle/conventions.versions.toml")

android {
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = conventions.versions."compose-compiler"
    }
}

dependencies {
    implementation conventions."compose-ui"
    implementation conventions."compose-foundation"
    implementation conventions."compose-material-three"
    implementation conventions."compose-icons-extended"
    implementation conventions."compose-activity"
}

// Workaround for parsing .toml versions within a precompiled script
def parseVersionsToml(filePath) {
    def file = rootProject.file(filePath)
    def toml = new groovy.toml.TomlSlurper().parse(file)
    return toGradleLike(toml)
}

def toGradleLike(toml) {
    def collection = [:]
    toml.libraries.each { key, value ->
        collection[key] = artifactOf(value, toml.versions)
    }
    collection["versions"] = toml.versions
    return collection
}

def artifactOf(provider, versions) {
    def version = provider.version
    if (!(version instanceof String)) {
        version = versions."${version.ref}"
    }
    return "${provider.group}:${provider.name}:${version}"
}